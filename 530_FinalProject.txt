/*
** Team: Final_Project_1
** Authors Name-ID : Krishna Singh Rajput - 1229962853
**                 : Nidhi Prakashbhai Mistry - 1230085261
** Course: IFT/530
** SQL Server version: Microsoft SQL Server 2022
*/

--CREATE A DATABASE FOR BANKING
CREATE DATABASE Final_Project_1;
GO

USE Final_Project_1;
GO

-- Create Bank table
CREATE TABLE Bank (
  bank_id INT NOT NULL,
  bank_name VARCHAR(50) NOT NULL,
  CONSTRAINT PK_Bank PRIMARY KEY (bank_id),
  CONSTRAINT CHK_BankID CHECK (bank_id > 0)
);

-- Create ATMs table
CREATE TABLE ATMs (
  atm_id INT NOT NULL,
  atm_address VARCHAR(50) NOT NULL,
  bill_limit SMALLINT NOT NULL DEFAULT 5000,
  cash_limit SMALLINT NOT NULL DEFAULT 10000,
  bank_id INT,
  CONSTRAINT PK_ATMs PRIMARY KEY (atm_id),
  CONSTRAINT FK_ATMs_Bank FOREIGN KEY (bank_id) REFERENCES Bank(bank_id) ON DELETE CASCADE
);

-- Create Customers table
CREATE TABLE Customers (
  customer_id INT NOT NULL,
  first_name VARCHAR(10) NOT NULL,
  last_name VARCHAR(10) NOT NULL,
  address VARCHAR(50) NOT NULL,
  phone_num VARCHAR(15) NOT NULL,
  CONSTRAINT PK_Customers PRIMARY KEY (customer_id),
);

-- Create Accounts table
CREATE TABLE Accounts (
  account_num INT NOT NULL,
  balance DECIMAL(38, 2) NOT NULL,
  bank_id INT,
  customer_id INT,
  CONSTRAINT PK_Accounts PRIMARY KEY (account_num),
  CONSTRAINT FK_Accounts_Bank FOREIGN KEY (bank_id) REFERENCES Bank(bank_id) ON DELETE CASCADE,
  CONSTRAINT FK_Accounts_Customers FOREIGN KEY (customer_id) REFERENCES Customers(customer_id) ON DELETE NO ACTION
);

-- Create Cards table
CREATE TABLE Cards (
  card_id INT NOT NULL,
  card_num CHAR(16) NOT NULL,
  pin CHAR(4) NOT NULL,
  account_num INT,
  CONSTRAINT PK_Cards PRIMARY KEY (card_id),
  CONSTRAINT UQ_Cards_CardNum UNIQUE (card_num),
  CONSTRAINT FK_Cards_Accounts FOREIGN KEY (account_num) REFERENCES Accounts(account_num) ON DELETE NO ACTION
);


-- Create Transactions table
CREATE TABLE Transactions (
  trans_id INT NOT NULL,
  trans_amount DECIMAL(10, 2) NOT NULL,
  is_deposit BIT,
  account_num INT,
  trans_date DATETIME,
  CONSTRAINT PK_Transactions PRIMARY KEY (trans_id),
  CONSTRAINT CHK_Transactions_TransID CHECK (trans_id > 0 AND trans_amount > 0),
  CONSTRAINT FK_Transactions_Accounts FOREIGN KEY (account_num) REFERENCES Accounts(account_num) ON DELETE CASCADE
);

--Testing query for Create tables  
SELECT 
    TABLE_NAME, 
    COLUMN_NAME, 
    DATA_TYPE, 
    CHARACTER_MAXIMUM_LENGTH, 
    NUMERIC_PRECISION, 
    NUMERIC_SCALE
FROM 
    INFORMATION_SCHEMA.COLUMNS
WHERE 
    TABLE_SCHEMA = 'dbo';

--Populate the Bank table
INSERT INTO Bank (bank_id, bank_name) VALUES
(113163645, 'State Bank of India'),
(118440214, 'HDFC Bank'),
(120522693, 'Central Bank'),
(177465746, 'Reserve Bank of India'),
(264576485, 'Chase'),
(307945084, 'Swiss Bank'),
(334615916, 'Bank of America'),
(361473636, 'Bank of Terrorist'),
(408987001, 'Desert Finance'),
(495885336, 'Rajputana Bank');

--Testing insert query
SELECT * FROM Bank;

--Populate the ATMs table
INSERT INTO ATMs (atm_id, atm_address, bill_limit, cash_limit, bank_id) VALUES
(216422679, '30 Magnolia Avenue Baldwin Park, CA 91706', 5000, 10000, 307945084),
(355615067, '38 Aspen Drive Chula Vista, CA 91911', 5000, 10000, 113163645),
(505570697, '43 Devonshire Drive San Diego, CA 92117', 5000, 10000, 264576485),
(687179920, '78 Pheasant Run Salinas, CA 93906', 5000, 10000, 334615916),
(730816273, '86 Schoolhouse Lane Huntington Beach, CA 92646', 5000, 10000, 495885336),
(760731674, '74 Center Street San Bernardino, CA 92404', 5000, 10000, 118440214),
(770139830, '44 College Street Van Nuys, CA 91405', 5000, 10000, 361473636),
(817085901, '10 1st Street Huntington Park, CA 90255', 5000, 10000, 177465746),
(842691955, '75 Cedar Lane Porterville, CA 93257', 5000, 10000, 120522693),
(939559663, '86 Route 7 Los Angeles, CA 90006', 5000, 10000, 408987001);

--Testing insert query
SELECT * FROM ATMs;

--Populate the Customers table
INSERT INTO Customers (customer_id, first_name, last_name, address, phone_num) VALUES
(191873690, 'Kristal', 'Tincher', ' 986 Schoolhouse Lane Huntington Beach, CA 92646', '6485151'),
(335430472, 'Elane', 'Tremble', ' 543 Devonshire Drive San Diego, CA 92117', '4749865'),
(338875710, 'Bryon', 'Rager', ' 678 Pheasant Run Salinas, CA 93906', '7458893'),
(481901357, 'Marvin', 'Binns', ' 838 Aspen Drive Chula Vista, CA 91911', '3304418'),
(548284015, 'Danielle', 'Arline', ' 644 College Street Van Nuys, CA 91405', '4494229'),
(616754635, 'Rosalee', 'Trivette', ' 574 Center Street San Bernardino, CA 92404', '2037896'),
(631659054, 'Shelley', 'Collard', ' 386 Route 7 Los Angeles, CA 90006', '1729720'),
(742042850, 'Errol', 'Brantner', ' 230 Magnolia Avenue Baldwin Park, CA 91706', '5954830'),
(972531115, 'Starla', 'Gilligan', ' 310 1st Street Huntington Park, CA 90255', '9108611'),
(995868025, 'Daphne', 'Lafreniere', ' 375 Cedar Lane Porterville, CA 93257', '9963696');

--Testing insert query
SELECT * FROM Customers;

--Populate the Accounts table
INSERT INTO Accounts (account_num, balance, bank_id, customer_id) VALUES
(114830997, 56377.00, 113163645,191873690),
(432495827, 49085.00, 408987001,335430472),
(476987939, 79740.00, 120522693,338875710),
(579414817, 26384.00, 177465746,481901357),
(599822009, 27866.00, 334615916,548284015),
(620948770, 99219.00, 495885336,616754635),
(753040214, 46167.00, 307945084,631659054),
(783728426, 27091.00, 361473636,742042850),
(947157830, 92416.00, 264576485,972531115),
(971931496, 22996.00, 118440214,995868025),
(763040312, 93487.00, 307945084,481901357),
(663728318, 69347.00, 361473636,548284015),
(837157222, 82733.00, 264576485,616754635),
(791931124, 1898.00, 118440214,631659054),
(420728786, 91101.00, 361473636,481901357);

--Testing insert query
SELECT * FROM Accounts;

--Populate the Cards table

INSERT INTO Cards (card_id, card_num, pin, account_num) VALUES
(155464422, '1028765010069440', '6203', 114830997),
(208921269, '8593374104865480', '1483', 432495827),
(290221785, '3111811876741060', '0091', 476987939),
(417844360, '1216011593502420', '3004', 579414817),
(527640142, '2378971424541900', '5628', 599822009),
(537373141, '2450563549027140', '9187', 620948770),
(551739681, '6186292285865560', '1253', 753040214),
(647379913, '2400249874857050', '1673', 783728426),
(730106009, '6240017680091590', '0832', 947157830),
(821275433, '3232467998313530', '1618', 971931496);

--Testing insert query
SELECT * FROM Accounts;

--Populate the Transactions table
INSERT INTO Transactions(trans_id, trans_amount,is_deposit, account_num, trans_date) VALUES
(106570209, 7272.00,1, 783728426, DATEADD(DAY, ABS(CHECKSUM(NEWID())) % 60, DATEADD(MONTH, -2, GETDATE()))),
(116447738, 4407.00,1, 837157222, DATEADD(DAY, ABS(CHECKSUM(NEWID())) % 60, DATEADD(MONTH, -2, GETDATE()))),
(121701496, 2814.00,1, 753040214, DATEADD(DAY, ABS(CHECKSUM(NEWID())) % 60, DATEADD(MONTH, -2, GETDATE()))),
(133254305, 9181.00,1, 114830997, DATEADD(DAY, ABS(CHECKSUM(NEWID())) % 60, DATEADD(MONTH, -2, GETDATE()))),
(143274211, 9912.00,1, 947157830, DATEADD(DAY, ABS(CHECKSUM(NEWID())) % 60, DATEADD(MONTH, -2, GETDATE()))),
(144993095, 5492.00, 1,620948770, DATEADD(DAY, ABS(CHECKSUM(NEWID())) % 60, DATEADD(MONTH, -2, GETDATE()))),
(177807570, 3433.00, 1,763040312, DATEADD(DAY, ABS(CHECKSUM(NEWID())) % 60, DATEADD(MONTH, -2, GETDATE()))),
(208911527, 829.00,1, 579414817, DATEADD(DAY, ABS(CHECKSUM(NEWID())) % 60, DATEADD(MONTH, -2, GETDATE()))),
(218918911, 3882.00,1, 420728786, DATEADD(DAY, ABS(CHECKSUM(NEWID())) % 60, DATEADD(MONTH, -2, GETDATE()))),
(249538953, 6644.00,1, 971931496, DATEADD(DAY, ABS(CHECKSUM(NEWID())) % 60, DATEADD(MONTH, -2, GETDATE()))),
(369274576, 4729.00,1, 663728318, DATEADD(DAY, ABS(CHECKSUM(NEWID())) % 60, DATEADD(MONTH, -2, GETDATE()))),
(376128270, 6506.00,1, 114830997, DATEADD(DAY, ABS(CHECKSUM(NEWID())) % 60, DATEADD(MONTH, -2, GETDATE()))),
(382234973, 2955.00,1, 753040214, DATEADD(DAY, ABS(CHECKSUM(NEWID())) % 60, DATEADD(MONTH, -2, GETDATE()))),
(384312620, 8136.00,1, 837157222, DATEADD(DAY, ABS(CHECKSUM(NEWID())) % 60, DATEADD(MONTH, -2, GETDATE()))),
(396217616, 4864.00,1, 476987939, DATEADD(DAY, ABS(CHECKSUM(NEWID())) % 60, DATEADD(MONTH, -2, GETDATE()))),
(448947694, 4344.00,1, 971931496, DATEADD(DAY, ABS(CHECKSUM(NEWID())) % 60, DATEADD(MONTH, -2, GETDATE()))),
(486812785, 7634.00,1, 599822009, DATEADD(DAY, ABS(CHECKSUM(NEWID())) % 60, DATEADD(MONTH, -2, GETDATE()))),
(530623079, 6328.00,1, 114830997, DATEADD(DAY, ABS(CHECKSUM(NEWID())) % 60, DATEADD(MONTH, -2, GETDATE()))),
(546033659, 1137.00,1, 114830997,DATEADD(DAY, ABS(CHECKSUM(NEWID())) % 60, DATEADD(MONTH, -2, GETDATE()))),
(546774692, 9521.00,1, 783728426, DATEADD(DAY, ABS(CHECKSUM(NEWID())) % 60, DATEADD(MONTH, -2, GETDATE()))),
(548155601, 5805.00,1, 432495827, DATEADD(DAY, ABS(CHECKSUM(NEWID())) % 60, DATEADD(MONTH, -2, GETDATE()))),
(556873740, 6948.00,1, 783728426, DATEADD(DAY, ABS(CHECKSUM(NEWID())) % 60, DATEADD(MONTH, -2, GETDATE()))),
(564987290, 1833.00,1, 599822009, DATEADD(DAY, ABS(CHECKSUM(NEWID())) % 60, DATEADD(MONTH, -2, GETDATE()))),
(619470814, 8489.00,1, 783728426, DATEADD(DAY, ABS(CHECKSUM(NEWID())) % 60, DATEADD(MONTH, -2, GETDATE()))),
(625387066, 5198.00,1, 753040214, DATEADD(DAY, ABS(CHECKSUM(NEWID())) % 60, DATEADD(MONTH, -2, GETDATE()))),
(630699311, 6279.00,1, 763040312, DATEADD(DAY, ABS(CHECKSUM(NEWID())) % 60, DATEADD(MONTH, -2, GETDATE()))),
(643451595, 4336.00,1, 579414817, DATEADD(DAY, ABS(CHECKSUM(NEWID())) % 60, DATEADD(MONTH, -2, GETDATE()))),
(673395009, 5155.00,1, 599822009, DATEADD(DAY, ABS(CHECKSUM(NEWID())) % 60, DATEADD(MONTH, -2, GETDATE()))),
(728512909, 9280.00,1, 763040312, DATEADD(DAY, ABS(CHECKSUM(NEWID())) % 60, DATEADD(MONTH, -2, GETDATE()))),
(729628474, 6638.00,1, 763040312, DATEADD(DAY, ABS(CHECKSUM(NEWID())) % 60, DATEADD(MONTH, -2, GETDATE()))),
(766379719, 9770.00,1, 476987939, DATEADD(DAY, ABS(CHECKSUM(NEWID())) % 60, DATEADD(MONTH, -2, GETDATE()))),
(769391743, 8147.00,1, 753040214, DATEADD(DAY, ABS(CHECKSUM(NEWID())) % 60, DATEADD(MONTH, -2, GETDATE()))),
(770458283, 1377.00,1, 753040214, DATEADD(DAY, ABS(CHECKSUM(NEWID())) % 60, DATEADD(MONTH, -2, GETDATE()))),
(773417442, 9379.00,1, 783728426, DATEADD(DAY, ABS(CHECKSUM(NEWID())) % 60, DATEADD(MONTH, -2, GETDATE()))),
(795084952, 4007.00,1, 620948770, DATEADD(DAY, ABS(CHECKSUM(NEWID())) % 60, DATEADD(MONTH, -2, GETDATE()))),
(825760641, 7082.00,1, 420728786, DATEADD(DAY, ABS(CHECKSUM(NEWID())) % 60, DATEADD(MONTH, -2, GETDATE()))),
(852227071, 2848.00,1, 971931496, DATEADD(DAY, ABS(CHECKSUM(NEWID())) % 60, DATEADD(MONTH, -2, GETDATE()))),
(874548386, 8827.00,1, 476987939, DATEADD(DAY, ABS(CHECKSUM(NEWID())) % 60, DATEADD(MONTH, -2, GETDATE()))),
(880557481, 3262.00,1, 579414817, DATEADD(DAY, ABS(CHECKSUM(NEWID())) % 60, DATEADD(MONTH, -2, GETDATE()))),
(882874187, 4716.00,1, 599822009, DATEADD(DAY, ABS(CHECKSUM(NEWID())) % 60, DATEADD(MONTH, -2, GETDATE()))),
(894711106, 5680.00,1, 114830997, DATEADD(DAY, ABS(CHECKSUM(NEWID())) % 60, DATEADD(MONTH, -2, GETDATE()))),
(919263910, 3184.00,1, 476987939, DATEADD(DAY, ABS(CHECKSUM(NEWID())) % 60, DATEADD(MONTH, -2, GETDATE()))),
(941903929, 7812.00,1, 947157830, DATEADD(DAY, ABS(CHECKSUM(NEWID())) % 60, DATEADD(MONTH, -2, GETDATE()))),
(946888003, 2192.00,1, 947157830, DATEADD(DAY, ABS(CHECKSUM(NEWID())) % 60, DATEADD(MONTH, -2, GETDATE()))),
(952702340, 6744.00,1, 432495827, DATEADD(DAY, ABS(CHECKSUM(NEWID())) % 60, DATEADD(MONTH, -2, GETDATE()))),
(954408907, 1637.00,1, 599822009, DATEADD(DAY, ABS(CHECKSUM(NEWID())) % 60, DATEADD(MONTH, -2, GETDATE()))),
(970315462, 9950.00,1, 663728318, DATEADD(DAY, ABS(CHECKSUM(NEWID())) % 60, DATEADD(MONTH, -2, GETDATE()))),
(972833584, 4645.00,1, 971931496, DATEADD(DAY, ABS(CHECKSUM(NEWID())) % 60, DATEADD(MONTH, -2, GETDATE()))),
(983396857, 8915.00,1, 476987939, DATEADD(DAY, ABS(CHECKSUM(NEWID())) % 60, DATEADD(MONTH, -2, GETDATE()))),
(984921176, 6445.00,1, 620948770, DATEADD(DAY, ABS(CHECKSUM(NEWID())) % 60, DATEADD(MONTH, -2, GETDATE()))),
(101367904, 163.00,0, 579414817, DATEADD(DAY, ABS(CHECKSUM(NEWID())) % 60, DATEADD(MONTH, -2, GETDATE()))),
(122063265, 22.00,0, 753040214, DATEADD(DAY, ABS(CHECKSUM(NEWID())) % 60, DATEADD(MONTH, -2, GETDATE()))),
(135479550, 25.00,0, 791931124, DATEADD(DAY, ABS(CHECKSUM(NEWID())) % 60, DATEADD(MONTH, -2, GETDATE()))),
(147553926, 326.00,0, 753040214, DATEADD(DAY, ABS(CHECKSUM(NEWID())) % 60, DATEADD(MONTH, -2, GETDATE()))),
(163523262, 417.00,0, 763040312, DATEADD(DAY, ABS(CHECKSUM(NEWID())) % 60, DATEADD(MONTH, -2, GETDATE()))),
(168458953, 245.00,0, 620948770, DATEADD(DAY, ABS(CHECKSUM(NEWID())) % 60, DATEADD(MONTH, -2, GETDATE()))),
(189380811, 25.00,0, 599822009, DATEADD(DAY, ABS(CHECKSUM(NEWID())) % 60, DATEADD(MONTH, -2, GETDATE()))),
(190149006, 11.00,0, 114830997, DATEADD(DAY, ABS(CHECKSUM(NEWID())) % 60, DATEADD(MONTH, -2, GETDATE()))),
(218182431, 328.00,0, 579414817, DATEADD(DAY, ABS(CHECKSUM(NEWID())) % 60, DATEADD(MONTH, -2, GETDATE()))),
(234301751, 12.00,0, 432495827, DATEADD(DAY, ABS(CHECKSUM(NEWID())) % 60, DATEADD(MONTH, -2, GETDATE()))),
(254043711, 132.00,0, 579414817, DATEADD(DAY, ABS(CHECKSUM(NEWID())) % 60, DATEADD(MONTH, -2, GETDATE()))),
(254548570, 135.00,0, 432495827, DATEADD(DAY, ABS(CHECKSUM(NEWID())) % 60, DATEADD(MONTH, -2, GETDATE()))),
(284916698, 6.00,0, 579414817, DATEADD(DAY, ABS(CHECKSUM(NEWID())) % 60, DATEADD(MONTH, -2, GETDATE()))),
(300317567, 226.00,0, 114830997, DATEADD(DAY, ABS(CHECKSUM(NEWID())) % 60, DATEADD(MONTH, -2, GETDATE()))),
(301242427, 44.00,0, 599822009, DATEADD(DAY, ABS(CHECKSUM(NEWID())) % 60, DATEADD(MONTH, -2, GETDATE()))),
(303010822, 283.00,0, 791931124, DATEADD(DAY, ABS(CHECKSUM(NEWID())) % 60, DATEADD(MONTH, -2, GETDATE()))),
(310497859, 474.00, 0,599822009, DATEADD(DAY, ABS(CHECKSUM(NEWID())) % 60, DATEADD(MONTH, -2, GETDATE()))),
(335995293, 96.00,0, 476987939, DATEADD(DAY, ABS(CHECKSUM(NEWID())) % 60, DATEADD(MONTH, -2, GETDATE()))),
(351066118, 183.00,0, 599822009, DATEADD(DAY, ABS(CHECKSUM(NEWID())) % 60, DATEADD(MONTH, -2, GETDATE()))),
(376992394, 108.00,0, 947157830, DATEADD(DAY, ABS(CHECKSUM(NEWID())) % 60, DATEADD(MONTH, -2, GETDATE()))),
(380600548, 122.00,0, 114830997, DATEADD(DAY, ABS(CHECKSUM(NEWID())) % 60, DATEADD(MONTH, -2, GETDATE()))),
(389351609, 466.00,0, 947157830, DATEADD(DAY, ABS(CHECKSUM(NEWID())) % 60, DATEADD(MONTH, -2, GETDATE()))),
(404548143, 435.00,0, 432495827, DATEADD(DAY, ABS(CHECKSUM(NEWID())) % 60, DATEADD(MONTH, -2, GETDATE()))),
(465343288, 279.00,0, 432495827, DATEADD(DAY, ABS(CHECKSUM(NEWID())) % 60, DATEADD(MONTH, -2, GETDATE()))),
(466881203, 259.00,0, 476987939, DATEADD(DAY, ABS(CHECKSUM(NEWID())) % 60, DATEADD(MONTH, -2, GETDATE()))),
(471626142, 316.00,0, 476987939, DATEADD(DAY, ABS(CHECKSUM(NEWID())) % 60, DATEADD(MONTH, -2, GETDATE()))),
(481522466, 152.00,0, 947157830, DATEADD(DAY, ABS(CHECKSUM(NEWID())) % 60, DATEADD(MONTH, -2, GETDATE()))),
(535469626, 169.00,0, 476987939, DATEADD(DAY, ABS(CHECKSUM(NEWID())) % 60, DATEADD(MONTH, -2, GETDATE()))),
(592142966, 171.00,0, 947157830, DATEADD(DAY, ABS(CHECKSUM(NEWID())) % 60, DATEADD(MONTH, -2, GETDATE()))),
(602456699, 281.00,0, 763040312, DATEADD(DAY, ABS(CHECKSUM(NEWID())) % 60, DATEADD(MONTH, -2, GETDATE()))),
(614088587, 306.00,0, 947157830, DATEADD(DAY, ABS(CHECKSUM(NEWID())) % 60, DATEADD(MONTH, -2, GETDATE()))),
(618234245, 74.00,0, 620948770, DATEADD(DAY, ABS(CHECKSUM(NEWID())) % 60, DATEADD(MONTH, -2, GETDATE()))),
(628776428, 269.00,0, 114830997, DATEADD(DAY, ABS(CHECKSUM(NEWID())) % 60, DATEADD(MONTH, -2, GETDATE()))),
(637605373, 268.00,0, 420728786, DATEADD(DAY, ABS(CHECKSUM(NEWID())) % 60, DATEADD(MONTH, -2, GETDATE()))),
(642168826, 306.00,0, 432495827,DATEADD(DAY, ABS(CHECKSUM(NEWID())) % 60, DATEADD(MONTH, -2, GETDATE()))),
(652188025, 390.00,0, 114830997, DATEADD(DAY, ABS(CHECKSUM(NEWID())) % 60, DATEADD(MONTH, -2, GETDATE()))),
(658953984, 481.00,0, 114830997, DATEADD(DAY, ABS(CHECKSUM(NEWID())) % 60, DATEADD(MONTH, -2, GETDATE()))),
(678189233, 247.00,0, 620948770,DATEADD(DAY, ABS(CHECKSUM(NEWID())) % 60, DATEADD(MONTH, -2, GETDATE()))),
(685303759, 465.00,0, 753040214,DATEADD(DAY, ABS(CHECKSUM(NEWID())) % 60, DATEADD(MONTH, -2, GETDATE()))),
(870797036, 370.00,0, 837157222, DATEADD(DAY, ABS(CHECKSUM(NEWID())) % 60, DATEADD(MONTH, -2, GETDATE()))),
(898901459, 4.00,0, 476987939, DATEADD(DAY, ABS(CHECKSUM(NEWID())) % 60, DATEADD(MONTH, -2, GETDATE()))),
(907748728, 396.00,0, 432495827, DATEADD(DAY, ABS(CHECKSUM(NEWID())) % 60, DATEADD(MONTH, -2, GETDATE()))),
(913334260, 311.00,0, 476987939, DATEADD(DAY, ABS(CHECKSUM(NEWID())) % 60, DATEADD(MONTH, -2, GETDATE()))),
(919185495, 31.00,0, 620948770, DATEADD(DAY, ABS(CHECKSUM(NEWID())) % 60, DATEADD(MONTH, -2, GETDATE()))),
(929270316, 97.00,0, 663728318, DATEADD(DAY, ABS(CHECKSUM(NEWID())) % 60, DATEADD(MONTH, -2, GETDATE()))),
(945607947, 27.00,0, 663728318, DATEADD(DAY, ABS(CHECKSUM(NEWID())) % 60, DATEADD(MONTH, -2, GETDATE()))),
(950908171, 358.00,0, 763040312, DATEADD(DAY, ABS(CHECKSUM(NEWID())) % 60, DATEADD(MONTH, -2, GETDATE()))),
(973167079, 24.00,0, 753040214, DATEADD(DAY, ABS(CHECKSUM(NEWID())) % 60, DATEADD(MONTH, -2, GETDATE()))),
(976786975, 94.00,0, 753040214, DATEADD(DAY, ABS(CHECKSUM(NEWID())) % 60, DATEADD(MONTH, -2, GETDATE()))),
(992554690, 297.00,0, 420728786, DATEADD(DAY, ABS(CHECKSUM(NEWID())) % 60, DATEADD(MONTH, -2, GETDATE())));

--Testing insert query
SELECT * FROM Transactions;

--Testing query for Number of rows in each tables
SELECT 
    t.name AS TABLE_NAME,
    SUM(p.rows) AS ROW_COUNT
FROM 
    sys.tables t
INNER JOIN 
    sys.partitions p ON t.object_id = p.object_id
WHERE 
    t.is_ms_shipped = 0
    AND p.index_id IN (0,1) 
GROUP BY 
    t.name;


-- View Query 1: Retrieve Customer Information with Account Details
USE Final_Project_1;
GO

CREATE VIEW CustomerAccountDetailsView AS
SELECT
    c.customer_id,
    c.first_name,
    c.last_name,
    c.address,
    c.phone_num,
    a.account_num,
    a.balance
FROM
    Customers c
INNER JOIN
    Accounts a ON c.customer_id = a.customer_id;

--Testing query for View 1
USE Final_Project_1;
GO
SELECT *
FROM CustomerAccountDetailsView
WHERE customer_id = 481901357;

-- View Query 2: Retrieve Transaction History for a Specific Account
USE Final_Project_1;
GO

CREATE VIEW AccountTransactionHistoryView AS
SELECT
    t.trans_id,
    t.trans_amount,
    t.is_deposit,
    t.account_num,
    t.trans_date
FROM
    Transactions t
INNER JOIN
    Accounts a ON t.account_num = a.account_num;
--Testing query for View 2
USE Final_Project_1;
GO
SELECT * 
FROM AccountTransactionHistoryView
WHERE account_num = 753040214
ORDER BY trans_date DESC;

-- Query 3: Retrieve Customer and Account Information for a Specific Bank
USE Final_Project_1;
GO

CREATE VIEW BankCustomerAccountView AS
SELECT
    b.bank_id,
    b.bank_name,
    a.account_num,
    a.balance,
    c.customer_id,
    c.first_name,
    c.last_name,
    c.address,
    c.phone_num
FROM
    Customers c
INNER JOIN
    Accounts a ON c.customer_id = a.customer_id
INNER JOIN
    Bank b ON a.bank_id = b.bank_id;

--Testing query for View 3

USE Final_Project_1;
GO
SELECT * 
FROM BankCustomerAccountView
WHERE bank_id = 361473636;


USE Final_Project_1;
GO

-- Create Audit table for Transactions
CREATE TABLE TransactionAudit (
  audit_id INT PRIMARY KEY,
  trans_id INT NOT NULL,
  action VARCHAR(50) NOT NULL,
  audit_date DATETIME,
  CONSTRAINT FK_TransactionAudit_Transactions FOREIGN KEY (trans_id) REFERENCES Transactions(trans_id) ON DELETE CASCADE
);
GO

-- Drop stored procedure if it already exists
IF OBJECT_ID('InsertTransaction', 'P') IS NOT NULL
    DROP PROCEDURE InsertTransaction;
GO

-- Create stored procedure for inserting transactions and logging audit
CREATE PROCEDURE InsertTransaction (
    @trans_amount DECIMAL(10, 2),
    @is_deposit BIT,
    @account_num INT
)
AS
BEGIN
    DECLARE @trans_id INT;
    -- Insert into Transactions table
    INSERT INTO Transactions (trans_amount, is_deposit, account_num, trans_date)
    VALUES (@trans_amount, @is_deposit, @account_num, GETDATE());
    
    -- Get the last inserted transaction ID
    SET @trans_id = SCOPE_IDENTITY();
    
    -- Log the action into TransactionAudit table
    INSERT INTO TransactionAudit (trans_id, action, audit_date)
    VALUES (@trans_id, 
            CASE WHEN @is_deposit = 1 THEN 'Deposit' ELSE 'Withdrawal' END, 
            GETDATE());
END;
GO

-- Create trigger to log transaction insertions into the audit table
CREATE TRIGGER LogTransactionAudit
ON Transactions
AFTER INSERT
AS
BEGIN
    INSERT INTO TransactionAudit (trans_id, action, audit_date)
    SELECT trans_id, 'Insert', GETDATE()
    FROM inserted;
END;
GO

-- Create trigger to log transaction deletions into the audit table
CREATE TRIGGER DeleteTransactionAudit
ON Transactions
AFTER DELETE
AS
BEGIN
    INSERT INTO TransactionAudit (trans_id, action, audit_date)
    SELECT trans_id, 'Delete', GETDATE()
    FROM deleted;
END;
GO

-- Create trigger to log transaction updates into the audit table
CREATE TRIGGER UpdateTransactionAudit
ON Transactions
AFTER UPDATE
AS
BEGIN
    INSERT INTO TransactionAudit (trans_id, action, audit_date)
    SELECT trans_id, 'Update', GETDATE()
    FROM inserted;
END;
GO

USE Final_Project_1;
GO
-- Test Audit table
-- Insert a value into transactions table
INSERT INTO Transactions (trans_id, trans_amount, is_deposit, account_num, trans_date)
VALUES (709392363, 100.00, 1, 420728786, GETDATE());

-- Modify a inserted transaction
UPDATE Transactions
SET trans_amount = 150.00
WHERE trans_id = 709392363;
--Check audit table for Transactions log
SELECT * FROM TransactionAudit;

--Store procedure to get the total balance of sprecifict user from all the accaounts
-- Drop stored procedure if it already exists
IF EXISTS (SELECT * FROM sys.objects WHERE type = 'P' AND name = 'GetCustomerTotalBalance')
    DROP PROCEDURE GetCustomerTotalBalance;
GO

-- Create stored procedure
CREATE PROCEDURE GetCustomerTotalBalance
    @customer_id INT
AS
BEGIN
    SET NOCOUNT ON;

    DECLARE @customer_name VARCHAR(50);
    DECLARE @total_balance DECIMAL(38, 2);

    -- Get customer name
    SELECT @customer_name = CONCAT(first_name, ' ', last_name)
    FROM Customers
    WHERE customer_id = @customer_id;

    -- Calculate total balance
    SELECT @total_balance = SUM(balance)
    FROM Accounts
    WHERE customer_id = @customer_id;

    -- Print customer ID, name, and total balance in table format
    SELECT 
        CustomerID = @customer_id,
        CustomerName = @customer_name,
        TotalBalance = @total_balance;
END;
GO

USE Final_Project_1;
GO
--Testing query for store procedure
-- Declare table variable to store output
DECLARE @Output TABLE (
    CustomerID INT,
    CustomerName VARCHAR(50),
    TotalBalance DECIMAL(38, 2)
);

-- Execute stored procedure and insert output into table variable
INSERT INTO @Output
EXEC GetCustomerTotalBalance @customer_id = 481901357;

-- Print results
SELECT * FROM @Output;

--UDF for calculating balance with interest rate in given bank.
USE Final_Project_1;
GO

-- Drop user-defined function if it already exists
IF EXISTS (SELECT * FROM sys.objects WHERE type = 'FN' AND name = 'CalculateAccountInterest')
    DROP FUNCTION CalculateAccountInterest;
GO

-- Create user-defined function
CREATE FUNCTION CalculateAccountInterest
(
    @balance DECIMAL(38, 2),
    @interest_rate DECIMAL(5, 2)
)
RETURNS DECIMAL(38, 2)
AS
BEGIN
    DECLARE @interest DECIMAL(38, 2);
    SET @interest = @balance * (@interest_rate / 100);
    RETURN @interest;
END;
GO


USE Final_Project_1;
GO
-- Drop the temporary table if it already exists
IF OBJECT_ID('tempdb..#CustomerBalanceWithInterest') IS NOT NULL
    DROP TABLE #CustomerBalanceWithInterest;

-- Create a temporary table to store customer balances with added interest
CREATE TABLE #CustomerBalanceWithInterest (
    CustomerID INT,
    FirstName VARCHAR(50),
    LastName VARCHAR(50),
    AccountNum INT,
    Balance DECIMAL(38, 2),
    InterestRate DECIMAL(5, 2),
    FinalBalance DECIMAL(38, 2)
);

-- Insert data into the temporary table by joining BankCustomerAccountView and calculating interest
INSERT INTO #CustomerBalanceWithInterest (CustomerID, FirstName, LastName, AccountNum, Balance, InterestRate, FinalBalance)
SELECT 
    bcav.customer_id,
    bcav.first_name,
    bcav.last_name,
    bcav.account_num,
    bcav.balance,
    5.00 AS InterestRate, -- Adjust interest rate as needed
    dbo.CalculateAccountInterest(bcav.balance, 5.00) + bcav.balance AS FinalBalance -- Adjust interest rate as needed
FROM 
    BankCustomerAccountView bcav
WHERE 
    bcav.bank_id = 361473636; 

-- Select and display the data from the temporary table
SELECT * FROM #CustomerBalanceWithInterest;

-- Drop the temporary table
DROP TABLE #CustomerBalanceWithInterest;

--Cursor code with testing query
USE Final_Project_1;
GO

-- Implementing cursor to calculate the total deposit and withdrawal based on the transactions.
-- Drop the table if it already exists.
IF OBJECT_ID('tempdb..#AccountSummary') IS NOT NULL
    DROP TABLE #AccountSummary;

-- Creating a temporary table
CREATE TABLE #AccountSummary (
    account_num INT PRIMARY KEY,
    total_deposits DECIMAL(10, 2),
    total_withdrawals DECIMAL(10, 2)
);

-- Declare variables
DECLARE @account_num INT;
DECLARE @trans_amount DECIMAL(10, 2);
DECLARE @is_deposit BIT;

-- Declare Cursor
DECLARE trans_cursor CURSOR FOR
SELECT account_num, trans_amount, is_deposit
FROM Transactions;

-- Open Cursor
OPEN trans_cursor;

-- Fetch First row
FETCH NEXT FROM trans_cursor INTO @account_num, @trans_amount, @is_deposit;

-- Loop through cursor
WHILE @@FETCH_STATUS = 0
BEGIN
    -- Check if account exists in the summary table
    IF NOT EXISTS (SELECT 1 FROM #AccountSummary WHERE account_num = @account_num)
    BEGIN
        -- Insert new row for the account
        INSERT INTO #AccountSummary (account_num, total_deposits, total_withdrawals)
        VALUES (@account_num, 0, 0);
    END

    -- Update account summary
    IF @is_deposit = 1
    BEGIN
        UPDATE #AccountSummary
        SET total_deposits = total_deposits + @trans_amount
        WHERE account_num = @account_num;
    END
    ELSE
    BEGIN
        UPDATE #AccountSummary
        SET total_withdrawals = total_withdrawals + @trans_amount
        WHERE account_num = @account_num;
    END

    -- Fetch next row
    FETCH NEXT FROM trans_cursor INTO @account_num, @trans_amount, @is_deposit;
END

-- Close and deallocate cursor
CLOSE trans_cursor;
DEALLOCATE trans_cursor;

--Testing query for cursor
-- Select and display results
SELECT * FROM #AccountSummary;
-- Drop temporary table
DROP TABLE #AccountSummary;







